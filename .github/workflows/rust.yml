name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Install stable rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Checkout code
      uses: actions/checkout@v4

    # Cache cargo registry (source code artifacts only):
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    # Restore third-party dependencies to deps-cache
    - name: Restore third-party dependencies cache
      uses: actions/cache@v3
      with:
        path: target/release/deps-cache
        key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-deps-

    # Copy the third-party dependencies from deps-cache to the proper location:
    - name: Restore third-party dependencies to target/release/deps
      run: |
        mkdir -p target/release/deps-cache
        mkdir -p target/release/deps
        rsync -av target/release/deps-cache/ target/release/deps/

    # Install cargo-binstall
    - name: Install cargo-binstall
      run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

    # Install Just using cargo-binstall
    - name: Install Just
      run: cargo binstall --no-confirm just

    - name: Install other dependencies listed in Justfile (bin-deps)
      run: just bin-deps

    - name: Build
      run: just build --release

    # Cache third-party dependencies (filter out project-specific artifacts)
    - name: Filter and cache third-party dependencies
      run: |
        PROJECT_NAME=$(grep '^name' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
        mkdir -p target/release/deps-cache
        rsync -av --exclude="*${PROJECT_NAME}*" target/release/deps/ target/release/deps-cache/
        
    - name: Cache filtered dependencies
      uses: actions/cache@v3
      with:
        path: target/release/deps-cache
        key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-deps-

    - name: Run tests
      run: just test --release
